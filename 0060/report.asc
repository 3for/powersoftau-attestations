-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

#######################################################

Powers of Tau Ceremony Attestation

pstehlik

##############


For brevity I modified some of the outputs of a few commands. Otherwise this is pretty much the whole setup/computation.

## Preparation

# 2018-02-13

Buy two 16GB USB sticks at a random electronics store in Berlin

Download Kali Linux from https://cdimage.kali.org/current/kali-linux-light-2018.1-amd64.iso
Kali Linux Light 64 Bit - 846M - 2018.1 - e47646078a5f31a952e9b5243a292d61bf6fc7af0d325f996c1fb45e0f721286

Downloaded the Kali PGP key manually beforehand but here's the output again

```
$ gpg --keyserver hkp://keys.gnupg.net --recv-key 7D8D0BF6
gpg: key ED444FF07D8D0BF6: 133 signatures not checked due to missing keys
gpg: key ED444FF07D8D0BF6: "Kali Linux Repository <devel@kali.org>" not changed
gpg: Total number processed: 1
gpg:              unchanged: 1
```

Verify Kali PGP Key

```
$ gpg --fingerprint 7D8D0BF6
pub   rsa4096 2012-03-05 [SC] [expires: 2021-02-03]
      44C6 513A 8E4F B3D3 0875  F758 ED44 4FF0 7D8D 0BF6
uid           [ unknown] Kali Linux Repository <devel@kali.org>
sub   rsa4096 2012-03-05 [E] [expires: 2021-02-03]
```

Checked in GPGTools UI what kind of signatures are on that key -> yes they are all done over the years. So that's likely the right key.

Verify shasum of Kali image using
https://cdimage.kali.org/current/SHA256SUMS
https://cdimage.kali.org/current/SHA256SUMS.gpg

```
$ gpg --verify SHA256SUMS.gpg SHA256SUMS
gpg: Signature made Tue Feb 13 09:33:53 2018 CET
gpg:                using RSA key 44C6513A8E4FB3D30875F758ED444FF07D8D0BF6
gpg: Good signature from "Kali Linux Repository <devel@kali.org>" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 44C6 513A 8E4F B3D3 0875  F758 ED44 4FF0 7D8D 0BF6
```

Verify image shasum256
```
$ shasum -a256 ~/Downloads/kali-linux-light-2018.1-amd64.iso 
e47646078a5f31a952e9b5243a292d61bf6fc7af0d325f996c1fb45e0f721286  /Users/pstehlik/Downloads/kali-linux-light-2018.1-amd64.iso

$ grep e47646078a5f31a952e9b5243a292d61bf6fc7af0d325f996c1fb45e0f721286 SHA256SUMS
e47646078a5f31a952e9b5243a292d61bf6fc7af0d325f996c1fb45e0f721286  kali-linux-light-2018.1-amd64.iso
```

Load the image onto the USB stick

```
time sudo dd if=kali-linux-light-2018.1-amd64.iso of=/dev/diskXXX bs=1
Password:
886767616+0 records in
886767616+0 records out
886767616 bytes transferred in 1530.877271 secs (579255 bytes/sec)

real    25m36.910s
user    2m47.204s
sys 13m56.340s
```

Test-run the USB stick on my MacBook Pro


# 2018-02-14
Preparation for install of Go and Powers of Tau Go Implementation
Test-install on VM booting Kali Live CD 

Download Go.
Verification details from https://golang.org/dl/. Download link is https://dl.google.com/go/go1.9.3.linux-amd64.tar.gz.
There was no public sha256sum for 1.9.3 listed on the golang download page. I found another one at https://linode.com/docs/development/go/install-go-on-ubuntu/ and used that (reasonably sure that it is the correct one).
Couldn't use go 1.9.4 because of https://github.com/golang/go/issues/23739

```bash
$ wget -v https://dl.google.com/go/go1.9.3.linux-amd64.tar.gz
$ sha256sum go1.9.3.linux-amd64.tar.gz
$ tar -C /usr/local -xzf go1.9.3.linux-amd64.tar.gz
$ export PATH=$PATH:/usr/local/go/bin
$ mkdir /root/go
$ export GOPATH=/root/go
```

Install needed packages
```bash
$ apt-get -y install git g++ make cmake doxygen
```

Install Go Powers of Tau Implementation
```bash
cd $GOPATH
git clone --recursive https://github.com/FiloSottile/powersoftau $(go env GOPATH)/src/github.com/FiloSottile/powersoftau
cd $(go env GOPATH)/src/github.com/FiloSottile/powersoftau && make
go install github.com/FiloSottile/powersoftau/cmd/taucompute
$(go env GOPATH)/bin/taucompute --help
```


# 2018-02-17
Morning:
- - Nuked the bootable USB stick and re-setup with the kali image, checking on image integrity beforehand based on sha265 hash
- - Unwrap 2nd USB stick
Keeping both sticks in my pants pocket until I get the challenge files to proceed with

Computation device preparation
- - Borrowed a laptop (a few years old) from a friend. He had it at his house and did not know what I was going to use it for when I asked him. From that point on the computer was in the house the whole time.
- - Removed the HDD

Evening:
Received challenge file link
https://s3-us-west-2.amazonaws.com/powersoftau/nXXXXXXXXXXXC/index.html

Copy these instructions onto 2nd USB drive to transfer to computation machine for ease of use.

On the machine download the challenge file and install all the tools.

Turn off the wireless connection.

# 2018-02-18 (gosh... is it midnight already?)
Early morning: Compute.

```
$ time $(go env GOPATH)/bin/taucompute -challenge /media/root/A2C7-CE74/challenge -response /media/root/A2C7-CE74/response
2018/02/18 00:02:34 Reading challenge...
2018/02/18 00:03:30 Starting computation...
2018/02/18 01:21:18 Writing response...
2018/02/18 01:22:07 Done!

Your contribution has been written to `response`

The BLAKE2b hash of `/media/root/A2C7-CE74/response` is:
    b839df11 1e5f8995 2a208132 ed57f6c5 
    3ab52759 cecf63e6 c011cf5e 439f2f25 
    0484f01b 06ae1a92 b23e1778 54febfa1 
    a832d743 be2ecc73 6091d419 8de274c4 

real    79m34.169s
user    268m55.260s
sys 1m2.589s
```

Sleeping through the computation.

Morning: 
- - Checking computation
- - Copy response details to 2nd USB drive
- - Shut down the computation device
- - Remove battery from the laptop. The machine won't be used for the next few days. 
- - Upload response from my MacBook Pro
- - Mail Jason 

Around noon:
- - Receiving the OK from Jason that the response file was accepted
- - Polishing this attestation.


A big thanks to Jason for the orchestration, organization, and for being on top of it + being super helpful!
#######################################################

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEyP91p2AIfbhjBfzrqrM/Qyr7I3wFAlqJfHwACgkQqrM/Qyr7
I3z9Kw//fEzuzL/tmg2BFJc6oBI+7wJx+ZwGSCVj4e1FDpVR5R3Bn0LlurV2kDWY
RoPSjGnok0qZrrZQAv36QfjQNdvEEN1ZM/PcKdLzCJliN2+Hpdw+/BJRXkbHxHSE
w1PqCG2gr0GJKREMjrILxycXi6RYtVqeaMVu4iAjV78SEAuhM5W5hhzndQ0STxOZ
N6Q4uw5gii4salz2y3j/NXSDVo0e080WkmpWdoQhXoPvTjGklEdEnvjp4IL0XM1W
3WF1/JEVcKDUTh3+EEylxCI6ude0hycU5GeomgqVEJNVXd0T1AT461TuOfG87rO0
a77IkA6FXCsdIxljo+eCbgUgl6tMppRnlnJ/JtKYNHifZewvp3xJZGuXVZSaP9Z6
BawCvvn2/ubUcBMy/wd5eaTvxA7SSm9YbNVYY23TF6x0DM5IsisoITl5m+R3Rmie
I/F0xeNmj6FbDf2MmZXxUOioFyWIsOoMAELGUA+a3bi///skH906T8viZXojXM9P
HKsEGejaodByGmm/ol4Fl2Gm4v1C8thSYzg+ugW10s1Q3vrQgc+A+HiV+n1weY4r
9+RqalNmZ9hR+4yHRZAIGpvNuAhzJElbc7Qu5MsP56G9/0AJXWuKLrNB2LCA+FhI
JqNuDVn4msn5G7UifXZZiyz6Iy7IW5T5tzsUOwbBSTI0KKDPHAM=
=3raI
-----END PGP SIGNATURE-----
